# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ControlWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5 import QtWebEngineWidgets
import Utility

class Ui_MainWindow3(object):
    def setupUi(self, MainWindow3):
        MainWindow3.setObjectName("MainWindow")
        MainWindow3.resize(800, 600)
        self.MainWindow3 = MainWindow3
        self.read = 0
        self.i = 0
        self.centralwidget = QtWidgets.QWidget(MainWindow3)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.widget = QtWebEngineWidgets.QWebEngineView(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget.sizePolicy().hasHeightForWidth())
        self.widget.setSizePolicy(sizePolicy)
        self.widget.setObjectName("widget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.widget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout.addWidget(self.widget, 0, 0, 1, 1)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setMaximumSize(QtCore.QSize(100, 100))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.b1)
        self.gridLayout.addWidget(self.pushButton, 0, 1, 1, 1)
        MainWindow3.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow3)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        MainWindow3.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow3)
        self.statusbar.setObjectName("statusbar")
        MainWindow3.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow3)
        QtCore.QMetaObject.connectSlotsByName(MainWindow3)

        self.forward = QShortcut(QKeySequence("w"),self.MainWindow3)
        self.forward.activated.connect(self.sendForwardInput)

        self.forwardleft = QShortcut(QKeySequence("Ctrl+w"), self.MainWindow3)
        self.forwardleft.activated.connect(self.sendForwardLeftInput)

        self.forwardrigth = QShortcut(QKeySequence("Alt+w"), self.MainWindow3)
        self.forwardrigth.activated.connect(self.sendForwardRigthInput)

        self.backwards = QShortcut(QKeySequence("s"), self.MainWindow3)
        self.backwards.activated.connect(self.sendBackwardsInput)

        self.backwardsleft = QShortcut(QKeySequence("Ctrl+s"), self.MainWindow3)
        self.backwardsleft.activated.connect(self.sendBackwardsLeftInput)

        self.backwardsrigth = QShortcut(QKeySequence("Alt+s"), self.MainWindow3)
        self.backwardsrigth.activated.connect(self.sendBackwardsRigthInput)


    def retranslateUi(self, MainWindow3):
        _translate = QtCore.QCoreApplication.translate
        MainWindow3.setWindowTitle(_translate("MainWindow", "ControlWindow"))
        self.pushButton.setText(_translate("MainWindow", "Start"))

    def b1(self):
        if self.i == 0:
            print("Pressed start control button")
            self.i = 1
            self.read = 1
        else:
            print("stopped control")
            self.i = 0
            self.read = 0

    def sendForwardInput(self):
        if self.read == 1:
            print("moving forward")
            Utility.sendSpeedDirection(0)

    def sendForwardLeftInput(self):
        if self.read == 1:
            print("moving left and forward")
            Utility.sendSpeedDirection(2)

    def sendForwardRigthInput(self):
        if self.read == 1:
            print("moving rigth and forward")
            Utility.sendSpeedDirection(1)

    def sendBackwardsInput(self):
        if self.read == 1:
            print("moving backwards")
            Utility.sendSpeedDirection(5)
    def sendBackwardsLeftInput(self):
        if self.read == 1:
            print("moving left and backwards")
            Utility.sendSpeedDirection(3)
    def sendBackwardsRigthInput(self):
        if self.read == 1:
            print("moving rigth and backwards")
            Utility.sendSpeedDirection(4)
